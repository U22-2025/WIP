name: Notify Discord on Issue Update
on:
  issues:
    types: [opened, closed, deleted]
permissions:
  issues: read
  contents: read
jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Save change summary
        id: change_summary
        run: |
          echo "ISSUE_TITLE=${{ github.event.issue.title }}" >> $GITHUB_ENV
          echo "ISSUE_NUMBER=${{ github.event.issue.number }}" >> $GITHUB_ENV
          echo "ISSUE_ACTION=${{ github.event.action }}" >> $GITHUB_ENV
          echo "ISSUE_URL=${{ github.event.issue.html_url }}" >> $GITHUB_ENV
      - name: Fetch open issues
        uses: actions/github-script@v7
        id: get_open_issues
        with:
          script: |
            const issues = await github.paginate(github.rest.issues.listForRepo, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "open",
              per_page: 100,
            });
            function format(issues) {
              if (issues.length === 0) return "*None*";
              // Use proper Discord markdown formatting for links
              return issues.map(i => `â€¢ [#${i.number} ${i.title}](${i.html_url})`).join("\\n");
            }
            return JSON.stringify({
              openIssues: format(issues)
            });
          result-encoding: string
      - name: Send to Discord
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          ISSUE_TITLE: ${{ env.ISSUE_TITLE }}
          ISSUE_NUMBER: ${{ env.ISSUE_NUMBER }}
          ISSUE_ACTION: ${{ env.ISSUE_ACTION }}
          ISSUE_URL: ${{ env.ISSUE_URL }}
        run: |
          echo '${{ steps.get_open_issues.outputs.result }}' > result.json
          OPEN_ISSUES=$(jq -r .openIssues result.json)
          
          # Create change description with proper link formatting
          if [ "$ISSUE_ACTION" = "opened" ]; then
            CHANGE_TEXT="â€¢ Issue [#$ISSUE_NUMBER $ISSUE_TITLE]($ISSUE_URL) was **created**"
          elif [ "$ISSUE_ACTION" = "closed" ]; then
            CHANGE_TEXT="â€¢ Issue [#$ISSUE_NUMBER $ISSUE_TITLE]($ISSUE_URL) was **closed**"
          elif [ "$ISSUE_ACTION" = "deleted" ]; then
            CHANGE_TEXT="â€¢ Issue #$ISSUE_NUMBER was **deleted**"
          else
            CHANGE_TEXT="â€¢ Issue [#$ISSUE_NUMBER $ISSUE_TITLE]($ISSUE_URL) was **updated**"
          fi
          
          # Create Discord webhook payload with proper formatting
          PAYLOAD=$(jq -n \
            --arg ct "$CHANGE_TEXT" \
            --arg oi "$OPEN_ISSUES" \
            --arg repo "${{ github.repository }}" \
            --arg url "${{ github.event.repository.html_url }}/issues" \
            '{
              content: "ðŸ”” **Issue Update Notification**",
              embeds: [
                {
                  title: "ðŸ“Œ Changes",
                  description: $ct,
                  color: 3447003,
                  timestamp: (now | strftime("%Y-%m-%dT%H:%M:%SZ"))
                },
                {
                  title: "ðŸŸ© Open Issues",
                  description: $oi,
                  color: 3066993,
                  footer: {
                    text: $repo,
                    icon_url: "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
                  },
                  url: $url
                }
              ]
            }'
          )
          
          curl -X POST -H "Content-Type: application/json" \
            -d "$PAYLOAD" "$DISCORD_WEBHOOK_URL"
