name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev/** ]
  pull_request:
    branches: [ main ]
  schedule:
    # 毎日午前3時（JST 12:00）に実行
    - cron: '0 3 * * *'

env:
  BUILD_TYPE: Release
  CPPLINT_OUTPUT: cpplint_output.txt

jobs:
  # コードスタイルとリンターチェック
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install cpplint
      run: pip install cpplint
    
    - name: Run cpplint
      run: |
        find . -name "*.cpp" -o -name "*.hpp" | xargs cpplint --filter=-legal/copyright,-build/include_subdir > $CPPLINT_OUTPUT 2>&1 || true
        cat $CPPLINT_OUTPUT
    
    - name: Upload cpplint results
      uses: actions/upload-artifact@v3
      with:
        name: cpplint-results
        path: ${{ env.CPPLINT_OUTPUT }}

  # マルチプラットフォームビルド
  build:
    needs: code-quality
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        compiler: [gcc, clang]
        build_type: [Debug, Release]
        exclude:
          # Windows では GCC を除外
          - os: windows-latest
            compiler: gcc
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up C++ environment (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          sudo apt-get install -y gcc-11 g++-11
          echo "CC=gcc-11" >> $GITHUB_ENV
          echo "CXX=g++-11" >> $GITHUB_ENV
        else
          sudo apt-get install -y clang-14
          echo "CC=clang-14" >> $GITHUB_ENV
          echo "CXX=clang++-14" >> $GITHUB_ENV
        fi
    
    - name: Set up C++ environment (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          brew install gcc
          echo "CC=gcc-13" >> $GITHUB_ENV
          echo "CXX=g++-13" >> $GITHUB_ENV
        else
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
        fi
    
    - name: Set up C++ environment (Windows)
      if: matrix.os == 'windows-latest'
      uses: ilammy/msvc-dev-cmd@v1
    
    - name: Configure CMake
      run: cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DWIPLIB_BUILD_TESTS=ON -DWIPLIB_ENABLE_SANITIZERS=ON
    
    - name: Build
      run: cmake --build build --config ${{ matrix.build_type }} --parallel $(nproc 2>/dev/null || sysctl -n hw.ncpu || echo 2)
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-${{ matrix.os }}-${{ matrix.compiler }}-${{ matrix.build_type }}
        path: |
          build/libwiplib.a
          build/libwiplib.so
          build/*.exe
          build/tools/

  # テスト実行
  test:
    needs: build
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        compiler: [gcc, clang]
        exclude:
          - os: windows-latest
            compiler: gcc
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-${{ matrix.os }}-${{ matrix.compiler }}-Release
        path: build/
    
    - name: Set up C++ environment (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          sudo apt-get install -y gcc-11 g++-11
          echo "CC=gcc-11" >> $GITHUB_ENV
          echo "CXX=g++-11" >> $GITHUB_ENV
        else
          sudo apt-get install -y clang-14
          echo "CC=clang-14" >> $GITHUB_ENV
          echo "CXX=clang++-14" >> $GITHUB_ENV
        fi
    
    - name: Set up C++ environment (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          brew install gcc
          echo "CC=gcc-13" >> $GITHUB_ENV
          echo "CXX=g++-13" >> $GITHUB_ENV
        else
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
        fi
    
    - name: Set up C++ environment (Windows)
      if: matrix.os == 'windows-latest'
      uses: ilammy/msvc-dev-cmd@v1
    
    - name: Configure and Build with Tests
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release -DWIPLIB_BUILD_TESTS=ON
        cmake --build build --config Release --parallel
    
    - name: Run Unit Tests
      run: |
        cd build
        ctest --output-on-failure --parallel
    
    - name: Run Legacy Tests
      run: |
        cd build
        ./wiplib_tests || echo "Legacy tests completed"
        ./wiplib_golden || echo "Golden tests completed"
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.compiler }}
        path: |
          build/Testing/
          build/test_results.xml

  # Python互換性テスト
  python-compatibility:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Set up C++ environment
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-11 g++-11
        echo "CC=gcc-11" >> $GITHUB_ENV
        echo "CXX=g++-11" >> $GITHUB_ENV
    
    - name: Build with compatibility tests
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release -DWIPLIB_BUILD_TESTS=ON
        cmake --build build --config Release --parallel
    
    - name: Run Python compatibility tests
      run: |
        cd build
        if [ -f ./wiplib_gtest ]; then
          ./wiplib_gtest --gtest_filter="*PythonCompatibility*"
        else
          echo "Compatibility tests not found, skipping"
        fi
    
    - name: Generate compatibility report
      run: |
        cd build
        if [ -f ./tools/wip_config_validator ]; then
          echo '{"server":{"host":"localhost","port":4110},"client":{"debug":false}}' > test_config.json
          ./tools/wip_config_validator --python-compat test_config.json > compatibility_report.txt || true
          cat compatibility_report.txt
        fi
    
    - name: Upload compatibility report
      uses: actions/upload-artifact@v3
      with:
        name: python-compatibility-report
        path: build/compatibility_report.txt

  # パフォーマンステスト
  performance:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf]')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up C++ environment
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-11 g++-11
        echo "CC=gcc-11" >> $GITHUB_ENV
        echo "CXX=g++-11" >> $GITHUB_ENV
    
    - name: Build optimized version
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release -DWIPLIB_BUILD_TESTS=ON -DCMAKE_CXX_FLAGS="-O3 -march=native"
        cmake --build build --config Release --parallel
    
    - name: Run performance tests
      run: |
        cd build
        if [ -f ./tools/wip_performance_test ]; then
          ./tools/wip_performance_test --iterations 10000 --format json --output performance_results.json all
          cat performance_results.json
        fi
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: build/performance_results.json

  # セキュリティスキャン
  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: cpp
    
    - name: Set up C++ environment
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-11 g++-11
    
    - name: Build for analysis
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Debug -DWIPLIB_BUILD_TESTS=ON
        cmake --build build --config Debug
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # ドキュメント生成
  documentation:
    needs: [build, test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Doxygen
      run: |
        sudo apt-get update
        sudo apt-get install -y doxygen graphviz
    
    - name: Generate documentation
      run: |
        cd docs
        doxygen Doxyfile
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/html
        destination_dir: docs

  # リリース自動化
  release:
    needs: [build, test, python-compatibility, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[release]')
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up C++ environment
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-11 g++-11
    
    - name: Build release version
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release -DWIPLIB_BUILD_TESTS=OFF
        cmake --build build --config Release --parallel
    
    - name: Package artifacts
      run: |
        mkdir -p release/lib release/include release/tools release/docs
        cp build/libwiplib.a release/lib/
        cp -r include/* release/include/
        cp build/tools/wip_* release/tools/ || true
        cp docs/examples/* release/docs/ || true
        tar -czf wiplib-cpp-release.tar.gz -C release .
    
    - name: Get version
      id: version
      run: |
        if grep -q "VERSION" CMakeLists.txt; then
          VERSION=$(grep "VERSION" CMakeLists.txt | sed -n 's/.*VERSION \([0-9.]*\).*/\1/p')
        else
          VERSION="0.1.0"
        fi
        echo "version=v$VERSION" >> $GITHUB_OUTPUT
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: WIPLib C++ ${{ steps.version.outputs.version }}
        body: |
          ## WIPLib C++ ライブラリリリース
          
          ### 主な機能
          - Python版WIPClientPyとの完全互換性
          - 高性能パケット処理
          - 包括的テストスイート
          - クロスプラットフォーム対応
          
          ### ダウンロード
          - `wiplib-cpp-release.tar.gz`: ライブラリ、ヘッダーファイル、ツール一式
          
          ### 変更履歴
          - 詳細な変更履歴は[CHANGELOG.md](CHANGELOG.md)を参照してください
        draft: false
        prerelease: false
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./wiplib-cpp-release.tar.gz
        asset_name: wiplib-cpp-release.tar.gz
        asset_content_type: application/gzip

  # 統合レポート生成
  integration-report:
    needs: [build, test, python-compatibility, performance, security]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Generate integration report
      run: |
        echo "# WIPLib C++ CI/CD Integration Report" > integration_report.md
        echo "Generated: $(date)" >> integration_report.md
        echo "" >> integration_report.md
        
        echo "## Build Results" >> integration_report.md
        ls -la build-* 2>/dev/null || echo "No build artifacts found" >> integration_report.md
        echo "" >> integration_report.md
        
        echo "## Test Results" >> integration_report.md
        ls -la test-results-* 2>/dev/null || echo "No test artifacts found" >> integration_report.md
        echo "" >> integration_report.md
        
        echo "## Compatibility" >> integration_report.md
        if [ -f python-compatibility-report/compatibility_report.txt ]; then
          cat python-compatibility-report/compatibility_report.txt >> integration_report.md
        else
          echo "Compatibility report not available" >> integration_report.md
        fi
        echo "" >> integration_report.md
        
        echo "## Performance" >> integration_report.md
        if [ -f performance-results/performance_results.json ]; then
          echo "Performance data available in JSON format" >> integration_report.md
        else
          echo "Performance data not available" >> integration_report.md
        fi
        echo "" >> integration_report.md
        
        echo "## Code Quality" >> integration_report.md
        if [ -f cpplint-results/$CPPLINT_OUTPUT ]; then
          echo "cpplint results:" >> integration_report.md
          cat cpplint-results/$CPPLINT_OUTPUT | head -20 >> integration_report.md
        else
          echo "Code quality results not available" >> integration_report.md
        fi
    
    - name: Upload integration report
      uses: actions/upload-artifact@v3
      with:
        name: integration-report
        path: integration_report.md