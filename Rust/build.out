warning: unexpected `cfg` condition name: `disabled`
   --> src/wip_common_rs/clients/python_compatible_client.rs:461:7
    |
461 | #[cfg(disabled)]
    |       ^^^^^^^^
    |
    = help: expected names are: `docsrs`, `feature`, and `test` and 31 more
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(disabled)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(disabled)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: `#[warn(unexpected_cfgs)]` on by default

warning: unused import: `verify_checksum12`
 --> src/wip_common_rs/packet/types/query_packet.rs:3:69
  |
3 | use crate::wip_common_rs::packet::core::checksum::{calc_checksum12, verify_checksum12};
  |                                                                     ^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `bytes_to_u128_le`
 --> src/wip_common_rs/packet/types/query_packet.rs:4:53
  |
4 | use crate::wip_common_rs::packet::core::bit_utils::{bytes_to_u128_le, u128_to_bytes_le, PacketFields};
  |                                                     ^^^^^^^^^^^^^^^^

warning: unused imports: `ExtendedFieldManager`, `FieldDefinition`, and `FieldType`
  --> src/wip_common_rs/packet/types/location_packet.rs:10:58
   |
10 | use crate::wip_common_rs::packet::core::extended_field::{ExtendedFieldManager, FieldDefinition, FieldType, FieldValue, unpack_ext_fields,...
   |                                                          ^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^  ^^^^^^^^^

warning: unused import: `calc_checksum12`
 --> src/wip_common_rs/packet/types/report_packet.rs:4:52
  |
4 | use crate::wip_common_rs::packet::core::checksum::{calc_checksum12, verify_checksum12, embed_checksum12_le};
  |                                                    ^^^^^^^^^^^^^^^

warning: unused imports: `bytes_to_u128_le` and `u128_to_bytes_le`
 --> src/wip_common_rs/packet/types/report_packet.rs:6:67
  |
6 | use crate::wip_common_rs::packet::core::bit_utils::{PacketFields, bytes_to_u128_le, u128_to_bytes_le};
  |                                                                   ^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^

warning: unused import: `crate::wip_common_rs::packet::core::bit_utils::bytes_to_u128_le`
 --> src/wip_common_rs/packet/debug/debug_logger.rs:3:5
  |
3 | use crate::wip_common_rs::packet::core::bit_utils::bytes_to_u128_le;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::wip_common_rs::packet::core::format_base::JsonPacketSpecLoader`
 --> src/wip_common_rs/packet/debug/debug_logger.rs:4:5
  |
4 | use crate::wip_common_rs::packet::core::format_base::JsonPacketSpecLoader;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `once_cell::sync::Lazy`
 --> src/wip_common_rs/packet/debug/debug_logger.rs:5:5
  |
5 | use once_cell::sync::Lazy;
  |     ^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::wip_common_rs::utils::config_loader::ConfigLoader`
  --> src/wip_common_rs/compatibility/python_protocol.rs:10:5
   |
10 | use crate::wip_common_rs::utils::config_loader::ConfigLoader;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::time::SystemTime`
 --> src/../common/utils/log_config.rs:5:5
  |
5 | use std::time::SystemTime;
  |     ^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `GlobalAlloc`, `Layout`, and `System`
 --> src/../common/utils/memory_pool.rs:4:18
  |
4 | use std::alloc::{GlobalAlloc, Layout, System};
  |                  ^^^^^^^^^^^  ^^^^^^  ^^^^^^

warning: unused imports: `sleep` and `timeout`
 --> src/../common/utils/communication_optimizer.rs:5:19
  |
5 | use tokio::time::{sleep, timeout};
  |                   ^^^^^  ^^^^^^^

warning: unused imports: `get_buffer` and `return_buffer`
 --> src/../common/utils/communication_optimizer.rs:6:63
  |
6 | use crate::common::utils::memory_pool::{ThreadSafeBufferPool, get_buffer, return_buffer};
  |                                                               ^^^^^^^^^^  ^^^^^^^^^^^^^

warning: unused import: `Duration`
 --> src/../common/utils/error_handling.rs:4:17
  |
4 | use std::time::{Duration, Instant};
  |                 ^^^^^^^^

warning: unused import: `tokio::time::interval`
 --> src/../common/utils/metrics.rs:5:5
  |
5 | use tokio::time::interval;
  |     ^^^^^^^^^^^^^^^^^^^^^

warning: unused variable: `server_addr`
   --> src/wip_common_rs/clients/python_compatible_client.rs:213:13
    |
213 |         let server_addr = format!("{}:{}", host, port);
    |             ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_server_addr`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `server_addr`
   --> src/wip_common_rs/clients/python_compatible_client.rs:316:13
    |
316 |         let server_addr = format!("{}:{}", host, port);
    |             ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_server_addr`

warning: unused variable: `server_addr`
   --> src/wip_common_rs/clients/python_compatible_client.rs:410:13
    |
410 |         let server_addr = format!("{}:{}", host, port);
    |             ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_server_addr`

warning: unused variable: `pressure_hpa`
   --> src/wip_common_rs/clients/python_compatible_client.rs:429:9
    |
429 |         pressure_hpa: Option<f64>,
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_pressure_hpa`

warning: value assigned to `last_error` is never read
   --> src/wip_common_rs/clients/utils/safe_sock_sendto.rs:212:17
    |
212 |         let mut last_error = None;
    |                 ^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?
    = note: `#[warn(unused_assignments)]` on by default

warning: unused variable: `latitude`
   --> src/wip_common_rs/clients/python_compatible_client.rs:270:9
    |
270 |         latitude: f64,
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_latitude`

warning: unused variable: `longitude`
   --> src/wip_common_rs/clients/python_compatible_client.rs:271:9
    |
271 |         longitude: f64,
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_longitude`

warning: unused variable: `source`
   --> src/wip_common_rs/clients/python_compatible_client.rs:272:9
    |
272 |         source: Option<(String, u16)>,
    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_source`

warning: unused variable: `header`
   --> src/wip_common_rs/packet/types/query_packet.rs:235:13
    |
235 |         let header = &data[..16];
    |             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_header`

warning: variable does not need to be mutable
  --> src/wip_common_rs/utils/cache.rs:54:13
   |
54 |         let mut map = self.store.lock().unwrap();
   |             ----^^^
   |             |
   |             help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: unused variable: `section`
  --> src/wip_common_rs/utils/config_loader.rs:92:30
   |
92 |     pub fn get_string(&self, section: &str, key: &str, default: &str) -> String {
   |                              ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_section`

warning: unused variable: `key`
  --> src/wip_common_rs/utils/config_loader.rs:92:45
   |
92 |     pub fn get_string(&self, section: &str, key: &str, default: &str) -> String {
   |                                             ^^^ help: if this is intentional, prefix it with an underscore: `_key`

warning: unused variable: `section`
  --> src/wip_common_rs/utils/config_loader.rs:97:27
   |
97 |     pub fn get_u16(&self, section: &str, key: &str, default: u16) -> u16 {
   |                           ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_section`

warning: unused variable: `key`
  --> src/wip_common_rs/utils/config_loader.rs:97:42
   |
97 |     pub fn get_u16(&self, section: &str, key: &str, default: u16) -> u16 {
   |                                          ^^^ help: if this is intentional, prefix it with an underscore: `_key`

warning: unused variable: `section`
   --> src/wip_common_rs/utils/config_loader.rs:101:27
    |
101 |     pub fn get_u32(&self, section: &str, key: &str, default: u32) -> u32 {
    |                           ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_section`

warning: unused variable: `key`
   --> src/wip_common_rs/utils/config_loader.rs:101:42
    |
101 |     pub fn get_u32(&self, section: &str, key: &str, default: u32) -> u32 {
    |                                          ^^^ help: if this is intentional, prefix it with an underscore: `_key`

warning: unused variable: `section`
   --> src/wip_common_rs/utils/config_loader.rs:105:27
    |
105 |     pub fn get_u64(&self, section: &str, key: &str, default: u64) -> u64 {
    |                           ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_section`

warning: unused variable: `key`
   --> src/wip_common_rs/utils/config_loader.rs:105:42
    |
105 |     pub fn get_u64(&self, section: &str, key: &str, default: u64) -> u64 {
    |                                          ^^^ help: if this is intentional, prefix it with an underscore: `_key`

warning: unused variable: `section`
   --> src/wip_common_rs/utils/config_loader.rs:109:27
    |
109 |     pub fn get_f64(&self, section: &str, key: &str, default: f64) -> f64 {
    |                           ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_section`

warning: unused variable: `key`
   --> src/wip_common_rs/utils/config_loader.rs:109:42
    |
109 |     pub fn get_f64(&self, section: &str, key: &str, default: f64) -> f64 {
    |                                          ^^^ help: if this is intentional, prefix it with an underscore: `_key`

warning: unused variable: `section`
   --> src/wip_common_rs/utils/config_loader.rs:113:30
    |
113 |     pub fn getboolean(&self, section: &str, key: &str, default: bool) -> bool {
    |                              ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_section`

warning: unused variable: `key`
   --> src/wip_common_rs/utils/config_loader.rs:113:45
    |
113 |     pub fn getboolean(&self, section: &str, key: &str, default: bool) -> bool {
    |                                             ^^^ help: if this is intentional, prefix it with an underscore: `_key`

warning: unused variable: `section`
   --> src/wip_common_rs/utils/config_loader.rs:117:39
    |
117 |     pub fn get_optional_string(&self, section: &str, key: &str) -> Option<String> {
    |                                       ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_section`

warning: unused variable: `key`
   --> src/wip_common_rs/utils/config_loader.rs:117:54
    |
117 |     pub fn get_optional_string(&self, section: &str, key: &str) -> Option<String> {
    |                                                      ^^^ help: if this is intentional, prefix it with an underscore: `_key`

warning: unused variable: `section`
   --> src/wip_common_rs/utils/config_loader.rs:121:36
    |
121 |     pub fn get_optional_u32(&self, section: &str, key: &str) -> Option<u32> {
    |                                    ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_section`

warning: unused variable: `key`
   --> src/wip_common_rs/utils/config_loader.rs:121:51
    |
121 |     pub fn get_optional_u32(&self, section: &str, key: &str) -> Option<u32> {
    |                                                   ^^^ help: if this is intentional, prefix it with an underscore: `_key`

warning: unused variable: `section`
   --> src/wip_common_rs/utils/config_loader.rs:125:36
    |
125 |     pub fn get_optional_u64(&self, section: &str, key: &str) -> Option<u64> {
    |                                    ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_section`

warning: unused variable: `key`
   --> src/wip_common_rs/utils/config_loader.rs:125:51
    |
125 |     pub fn get_optional_u64(&self, section: &str, key: &str) -> Option<u64> {
    |                                                   ^^^ help: if this is intentional, prefix it with an underscore: `_key`

warning: unused variable: `client`
  --> src/wip_common_rs/utils/redis_log_handler.rs:33:13
   |
33 |         let client: Option<()> = None;
   |             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_client`

warning: unused variable: `redis_url`
  --> src/wip_common_rs/utils/redis_log_handler.rs:25:16
   |
25 |     pub fn new(redis_url: Option<&str>, service_name:&str)->Self{
   |                ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_redis_url`

warning: unused variable: `conn`
  --> src/wip_common_rs/utils/redis_log_handler.rs:38:135
   |
38 | ...n.lock().unwrap(); if let Some(conn) = conn_guard.as_mut(){ let json = serde_json::to_string(&entry).map_err(|e| format!("Failed to se...
   |                                   ^^^^ help: if this is intentional, prefix it with an underscore: `_conn`

warning: unused variable: `json`
  --> src/wip_common_rs/utils/redis_log_handler.rs:38:168
   |
38 | ...nn) = conn_guard.as_mut(){ let json = serde_json::to_string(&entry).map_err(|e| format!("Failed to serialize log entry: {}", e))?; #[c...
   |                                   ^^^^ help: if this is intentional, prefix it with an underscore: `_json`

warning: unused variable: `conn`
  --> src/wip_common_rs/utils/redis_log_handler.rs:40:149
   |
40 | ...n.lock().unwrap(); if let Some(conn) = conn_guard.as_mut(){ #[cfg(feature="redis-logging")] { let logs:Vec<String> = redis::cmd("LRANG...
   |                                   ^^^^ help: if this is intentional, prefix it with an underscore: `_conn`

warning: unused variable: `count`
  --> src/wip_common_rs/utils/redis_log_handler.rs:40:35
   |
40 |     pub fn get_recent_logs(&self, count: usize)->Result<Vec<RedisLogEntry>,String>{ let mut conn_guard=self.connection.lock().unwrap(); i...
   |                                   ^^^^^ help: if this is intentional, prefix it with an underscore: `_count`

warning: unused variable: `conn`
  --> src/wip_common_rs/utils/redis_log_handler.rs:44:140
   |
44 | ...n.lock().unwrap(); if let Some(conn)=conn_guard.as_mut(){ #[cfg(feature="redis-logging")] { let _: () = redis::cmd("DEL").arg(&self.lo...
   |                                   ^^^^ help: if this is intentional, prefix it with an underscore: `_conn`

warning: variable does not need to be mutable
  --> src/wip_common_rs/utils/redis_log_handler.rs:46:56
   |
46 |     fn ensure_connected(&self)->Result<(),String>{ let mut conn_guard=self.connection.lock().unwrap(); if conn_guard.is_none(){ #[cfg(fea...
   |                                                        ----^^^^^^^^^^
   |                                                        |
   |                                                        help: remove this `mut`

warning: unused variable: `conn`
  --> src/wip_common_rs/utils/redis_log_handler.rs:47:145
   |
47 | ...n.lock().unwrap(); if let Some(conn)=conn_guard.as_mut(){ #[cfg(feature="redis-logging")] { let _: String = redis::cmd("PING").query(c...
   |                                   ^^^^ help: if this is intentional, prefix it with an underscore: `_conn`

warning: unused variable: `rotation`
   --> src/../common/utils/log_config.rs:283:25
    |
283 |             if let Some(rotation) = &self.rotation {
    |                         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_rotation`

warning: fields `host` and `port` are never read
  --> src/wip_common_rs/clients/python_compatible_client.rs:20:5
   |
19 | pub struct PythonCompatibleWeatherClient {
   |            ----------------------------- fields in this struct
20 |     host: String,
   |     ^^^^
21 |     port: u16,
   |     ^^^^
   |
   = note: `PythonCompatibleWeatherClient` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis
   = note: `#[warn(dead_code)]` on by default

warning: fields `server_host` and `server_port` are never read
   --> src/wip_common_rs/clients/python_compatible_client.rs:175:5
    |
174 | pub struct PythonCompatibleLocationClient {
    |            ------------------------------ fields in this struct
175 |     server_host: String,
    |     ^^^^^^^^^^^
176 |     server_port: u16,
    |     ^^^^^^^^^^^
    |
    = note: `PythonCompatibleLocationClient` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: fields `host` and `port` are never read
   --> src/wip_common_rs/clients/python_compatible_client.rs:295:5
    |
294 | pub struct PythonCompatibleQueryClient {
    |            --------------------------- fields in this struct
295 |     host: String,
    |     ^^^^
296 |     port: u16,
    |     ^^^^
    |
    = note: `PythonCompatibleQueryClient` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: fields `host` and `port` are never read
   --> src/wip_common_rs/clients/python_compatible_client.rs:389:5
    |
388 | pub struct PythonCompatibleReportClient {
    |            ---------------------------- fields in this struct
389 |     host: String,
    |     ^^^^
390 |     port: u16,
    |     ^^^^
    |
    = note: `PythonCompatibleReportClient` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: static `REQUEST_FIELDS` is never used
 --> src/wip_common_rs/packet/types/query_packet.rs:9:8
  |
9 | static REQUEST_FIELDS: Lazy<PacketFields> = Lazy::new(|| {
  |        ^^^^^^^^^^^^^^

warning: static `RESPONSE_FIELDS` is never used
  --> src/wip_common_rs/packet/types/query_packet.rs:15:8
   |
15 | static RESPONSE_FIELDS: Lazy<PacketFields> = Lazy::new(|| {
   |        ^^^^^^^^^^^^^^^

warning: static `RESPONSE_FIELDS` is never used
  --> src/wip_common_rs/packet/types/report_packet.rs:10:8
   |
10 | static RESPONSE_FIELDS: Lazy<PacketFields> = Lazy::new(|| {
   |        ^^^^^^^^^^^^^^^

warning: field `ty` is never read
  --> src/wip_common_rs/packet/core/extended_field.rs:13:5
   |
11 | struct ExtSpecEntry {
   |        ------------ field in this struct
12 |     id: u8,
13 |     ty: String,
   |     ^^
   |
   = note: `ExtSpecEntry` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: field `log_key` is never read
  --> src/wip_common_rs/utils/redis_log_handler.rs:20:5
   |
13 | pub struct RedisLogHandler {
   |            --------------- field in this struct
...
20 |     log_key: String,
   |     ^^^^^^^

warning: field `connection_timeout` is never read
   --> src/../common/utils/network.rs:303:5
    |
300 | pub struct ConnectionPool {
    |            -------------- field in this struct
...
303 |     connection_timeout: Duration,
    |     ^^^^^^^^^^^^^^^^^^

warning: field `buffer_pool` is never read
   --> src/../common/utils/communication_optimizer.rs:180:5
    |
176 | pub struct PacketBatcher<T> {
    |            ------------- field in this struct
...
180 |     buffer_pool: ThreadSafeBufferPool,
    |     ^^^^^^^^^^^

warning: field `buffer_pool` is never read
   --> src/../common/utils/communication_optimizer.rs:441:5
    |
437 | pub struct CommunicationOptimizer {
    |            ---------------------- field in this struct
...
441 |     buffer_pool: ThreadSafeBufferPool,
    |     ^^^^^^^^^^^

warning: comparison is useless due to type limits
   --> src/../common/utils/network.rs:232:17
    |
232 |     port > 0 && port <= 65535
    |                 ^^^^^^^^^^^^^
    |
    = note: `#[warn(unused_comparisons)]` on by default

warning: `wip_rust` (lib) generated 67 warnings (run `cargo fix --lib -p wip_rust` to apply 17 suggestions)
warning: unused import: `ReportClient`
 --> src/bin/wip-report.rs:3:55
  |
3 | use wip_rust::wip_common_rs::clients::report_client::{ReportClient, ReportClientImpl};
  |                                                       ^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `client`
   --> src/bin/wip-report.rs:174:5
    |
174 |     client: &ReportClientImpl,
    |     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_client`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `client`
   --> src/bin/wip-report.rs:204:5
    |
204 |     client: &ReportClientImpl,
    |     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_client`

warning: unused variable: `description`
   --> src/bin/wip-report.rs:232:9
    |
232 |     let description = format!(
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_description`

warning: unused variable: `server_addr`
   --> src/bin/wip-report.rs:320:9
    |
320 |     let server_addr = format!("{}:{}", cli.host, cli.port);
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_server_addr`

warning: unused variable: `command`
   --> src/bin/wip-cli.rs:345:36
    |
345 |         Commands::Location { port, command } => {
    |                                    ^^^^^^^ help: try ignoring the field: `command: _`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `command`
   --> src/bin/wip-cli.rs:350:33
    |
350 |         Commands::Query { port, command } => {
    |                                 ^^^^^^^ help: try ignoring the field: `command: _`

warning: unused variable: `command`
   --> src/bin/wip-cli.rs:355:34
    |
355 |         Commands::Report { port, command } => {
    |                                  ^^^^^^^ help: try ignoring the field: `command: _`

warning: unused variable: `command`
   --> src/bin/wip-cli.rs:360:26
    |
360 |         Commands::Auth { command } => {
    |                          ^^^^^^^ help: try ignoring the field: `command: _`

warning: unused import: `QueryClient`
 --> src/bin/wip-query.rs:3:54
  |
3 | use wip_rust::wip_common_rs::clients::query_client::{QueryClient, QueryClientImpl};
  |                                                      ^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `server_addr`
   --> src/bin/wip-query.rs:195:9
    |
195 |     let server_addr = format!("{}:{}", cli.host, cli.port);
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_server_addr`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `client`
   --> src/bin/wip-query.rs:196:9
    |
196 |     let client = QueryClientImpl::new(&cli.host, cli.port).await?;
    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_client`

warning: function `format_query_response` is never used
   --> src/bin/wip-query.rs:134:4
    |
134 | fn format_query_response(query_type: &str, result: &std::collections::HashMap<String, serde_json::Value>, format: &str) {
    |    ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: unused variable: `server_addr`
   --> src/bin/wip-location.rs:156:9
    |
156 |     let server_addr = format!("{}:{}", cli.host, cli.port);
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_server_addr`
    |
    = note: `#[warn(unused_variables)]` on by default

   Compiling wip_rust v0.1.0 (/mnt/c/Users/pijon/Desktop/wip/Rust)
warning: `wip_rust` (bin "wip-report") generated 5 warnings (run `cargo fix --bin "wip-report"` to apply 1 suggestion)
warning: `wip_rust` (bin "wip-cli") generated 4 warnings
warning: `wip_rust` (bin "wip-query") generated 4 warnings (run `cargo fix --bin "wip-query"` to apply 1 suggestion)
warning: `wip_rust` (bin "wip-location") generated 1 warning
error: expected `,`, found `.`
   --> src/bin/wip_migration_tool.rs:131:18
    |
131 |     println!("=" .repeat(50));
    |                  ^ expected `,`

error: argument never used
   --> src/bin/wip_migration_tool.rs:131:19
    |
131 |     println!("=" .repeat(50));
    |              ---  ^^^^^^^^^^ argument never used
    |              |
    |              formatting specifier missing

error: 2 positional arguments in format string, but there is 1 argument
   --> src/bin/wip_migration_tool.rs:255:18
    |
255 |     iterations = {}
    |                  ^^
...
280 |     print(f"Python Results ({} iterations):")
    |                             ^^
...
286 | "#, iterations);
    |     ----------

error[E0432]: unresolved imports `clap::App`, `clap::SubCommand`
  --> src/bin/wip_migration_tool.rs:13:12
   |
13 | use clap::{App, Arg, SubCommand};
   |            ^^^       ^^^^^^^^^^
   |            |         |
   |            |         no `SubCommand` in the root
   |            |         help: a similar name exists in the module (notice the capitalization): `Subcommand`
   |            no `App` in the root

error[E0425]: cannot find function `repeat` in this scope
   --> src/bin/wip_migration_tool.rs:131:19
    |
131 |     println!("=" .repeat(50));
    |                   ^^^^^^ not found in this scope
    |
help: consider importing one of these functions
    |
8   + use std::array::repeat;
    |
8   + use std::io::repeat;
    |
8   + use std::iter::repeat;
    |
8   + use core::array::repeat;
    |
      and 4 other candidates

warning: unused import: `std::env`
 --> src/bin/wip_migration_tool.rs:8:5
  |
8 | use std::env;
  |     ^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

error[E0599]: no function or associated item named `with_name` found for struct `Arg` in the current scope
   --> src/bin/wip_migration_tool.rs:24:26
    |
24  |                     Arg::with_name("python_file")
    |                          ^^^^^^^^^ function or associated item not found in `Arg`
    |
note: if you're trying to build a new `Arg`, consider using `Arg::new` which returns `Arg`
   --> /home/bababa/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clap_builder-4.5.44/src/builder/arg.rs:122:5
    |
122 |     pub fn new(id: impl Into<Id>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no function or associated item named `with_name` found for struct `Arg` in the current scope
   --> src/bin/wip_migration_tool.rs:34:26
    |
34  |                     Arg::with_name("python_file")
    |                          ^^^^^^^^^ function or associated item not found in `Arg`
    |
note: if you're trying to build a new `Arg`, consider using `Arg::new` which returns `Arg`
   --> /home/bababa/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clap_builder-4.5.44/src/builder/arg.rs:122:5
    |
122 |     pub fn new(id: impl Into<Id>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no function or associated item named `with_name` found for struct `Arg` in the current scope
   --> src/bin/wip_migration_tool.rs:40:26
    |
40  |                     Arg::with_name("output")
    |                          ^^^^^^^^^ function or associated item not found in `Arg`
    |
note: if you're trying to build a new `Arg`, consider using `Arg::new` which returns `Arg`
   --> /home/bababa/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clap_builder-4.5.44/src/builder/arg.rs:122:5
    |
122 |     pub fn new(id: impl Into<Id>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no function or associated item named `with_name` found for struct `Arg` in the current scope
   --> src/bin/wip_migration_tool.rs:52:26
    |
52  |                     Arg::with_name("python_script")
    |                          ^^^^^^^^^ function or associated item not found in `Arg`
    |
note: if you're trying to build a new `Arg`, consider using `Arg::new` which returns `Arg`
   --> /home/bababa/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clap_builder-4.5.44/src/builder/arg.rs:122:5
    |
122 |     pub fn new(id: impl Into<Id>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no function or associated item named `with_name` found for struct `Arg` in the current scope
   --> src/bin/wip_migration_tool.rs:62:26
    |
62  |                     Arg::with_name("iterations")
    |                          ^^^^^^^^^ function or associated item not found in `Arg`
    |
note: if you're trying to build a new `Arg`, consider using `Arg::new` which returns `Arg`
   --> /home/bababa/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clap_builder-4.5.44/src/builder/arg.rs:122:5
    |
122 |     pub fn new(id: impl Into<Id>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Some errors have detailed explanations: E0425, E0432, E0599.
For more information about an error, try `rustc --explain E0425`.
warning: `wip_rust` (bin "wip-migration-tool") generated 1 warning
error: could not compile `wip_rust` (bin "wip-migration-tool") due to 10 previous errors; 1 warning emitted
